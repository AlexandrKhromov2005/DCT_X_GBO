#include "block.h"

namespace DCT {

    // Реализация умножения матриц: result = a * b.
    void multiplyMatrices(const Matrix<double>& a, const Matrix<double>& b, Matrix<double>& result) {
        for (std::size_t i = 0; i < 8; i++) {
            for (std::size_t j = 0; j < 8; j++) {
                result[i][j] = 0.0;
                for (std::size_t k = 0; k < 8; k++) {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }
    }

    // Преобразование pixelBlock (unsigned char) в freqBlock (double).
    void convertToDouble(const Matrix<unsigned char>& src, Matrix<double>& dest) {
        for (std::size_t i = 0; i < 8; i++) {
            for (std::size_t j = 0; j < 8; j++) {
                dest[i][j] = static_cast<double>(src[i][j]);
            }
        }
    }

    // Преобразование freqBlock (double) в pixelBlock (unsigned char) с округлением и ограничением [0,255].
    void convertToUChar(const Matrix<double>& src, Matrix<unsigned char>& dest) {
        for (std::size_t i = 0; i < 8; i++) {
            for (std::size_t j = 0; j < 8; j++) {
                double val = src[i][j];
                val = (val >= 0.0) ? (val + 0.5) : (val - 0.5);
                int int_val = static_cast<int>(val);
                if (int_val < 0)
                    int_val = 0;
                else if (int_val > 255)
                    int_val = 255;
                dest[i][j] = static_cast<unsigned char>(int_val);
            }
        }
    }

    // Определение константных матриц DCT.
    const Matrix<double> c = {{
        { 0.35355339059327376220, 0.35355339059327376220, 0.35355339059327376220, 0.35355339059327376220,
          0.35355339059327376220, 0.35355339059327376220, 0.35355339059327376220, 0.35355339059327376220 },
        { 0.49039264020161522455, 0.41573480615127262014, 0.27778511650980111237, 0.09754516100806413303,
         -0.09754516100806413303, -0.27778511650980111237, -0.41573480615127262014, -0.49039264020161522455 },
        { 0.46193976625564334747, 0.19134171618254489286, -0.19134171618254489286, -0.46193976625564334747,
         -0.46193976625564334747, -0.19134171618254489286, 0.19134171618254489286, 0.46193976625564334747 },
        { 0.41573480615127262014, -0.09754516100806413303, -0.49039264020161522455, -0.27778511650980111237,
          0.27778511650980111237, 0.49039264020161522455, 0.09754516100806413303, -0.41573480615127262014 },
        { 0.35355339059327376220, -0.35355339059327376220, -0.35355339059327376220, 0.35355339059327376220,
          0.35355339059327376220, -0.35355339059327376220, -0.35355339059327376220, 0.35355339059327376220 },
        { 0.27778511650980111237, -0.49039264020161522455, 0.09754516100806413303, 0.41573480615127262014,
         -0.41573480615127262014, -0.09754516100806413303, 0.49039264020161522455, -0.27778511650980111237 },
        { 0.19134171618254489286, -0.46193976625564334747, 0.46193976625564334747, -0.19134171618254489286,
         -0.19134171618254489286, 0.46193976625564334747, -0.46193976625564334747, 0.19134171618254489286 },
        { 0.09754516100806413303, -0.27778511650980111237, 0.41573480615127262014, -0.49039264020161522455,
          0.49039264020161522455, -0.41573480615127262014, 0.27778511650980111237, -0.09754516100806413303 }
    }};

    const Matrix<double> c_t = {{
        { 0.35355339059327376220, 0.49039264020161522455, 0.46193976625564334747, 0.41573480615127262014,
          0.35355339059327376220, 0.27778511650980111237, 0.19134171618254489286, 0.09754516100806413303 },
        { 0.35355339059327376220, 0.41573480615127262014, 0.19134171618254489286, -0.09754516100806413303,
         -0.35355339059327376220, -0.49039264020161522455, -0.46193976625564334747, -0.27778511650980111237 },
        { 0.35355339059327376220, 0.27778511650980111237, -0.19134171618254489286, -0.49039264020161522455,
         -0.35355339059327376220, 0.09754516100806413303, 0.46193976625564334747, 0.41573480615127262014 },
        { 0.35355339059327376220, 0.09754516100806413303, -0.46193976625564334747, -0.27778511650980111237,
          0.35355339059327376220, 0.41573480615127262014, -0.19134171618254489286, -0.49039264020161522455 },
        { 0.35355339059327376220, -0.09754516100806413303, -0.46193976625564334747, 0.27778511650980111237,
          0.35355339059327376220, -0.41573480615127262014, -0.19134171618254489286, 0.49039264020161522455 },
        { 0.35355339059327376220, -0.27778511650980111237, -0.19134171618254489286, 0.49039264020161522455,
         -0.35355339059327376220, -0.09754516100806413303, 0.46193976625564334747, -0.41573480615127262014 },
        { 0.35355339059327376220, -0.41573480615127262014, 0.19134171618254489286, 0.09754516100806413303,
         -0.35355339059327376220, 0.49039264020161522455, -0.46193976625564334747, 0.27778511650980111237 },
        { 0.35355339059327376220, -0.49039264020161522455, 0.46193976625564334747, -0.41573480615127262014,
          0.35355339059327376220, -0.27778511650980111237, 0.19134171618254489286, -0.09754516100806413303 }
    }};

    // Прямое преобразование DCT: преобразует блок пикселей в блок DCT-коэффициентов.
    void dct_func(const Matrix<unsigned char>& block, Matrix<double>& dct_block) {
        Matrix<double> double_block;
        Matrix<double> temp_block;
        convertToDouble(block, double_block);
        multiplyMatrices(c_t, double_block, temp_block);
        multiplyMatrices(c, temp_block, dct_block);
    }

    // Обратное преобразование DCT: преобразует блок DCT-коэффициентов обратно в блок пикселей.
    void rev_dct_func(Matrix<unsigned char>& block, const Matrix<double>& dct_block) {
        Matrix<double> double_block;
        Matrix<double> temp_block;
        multiplyMatrices(dct_block, c, temp_block);
        multiplyMatrices(c_t, temp_block, double_block);
        convertToUChar(double_block, block);
    }
}
